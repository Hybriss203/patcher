From c1b06c9b6c7b8ed684033894059a2a859f85e708 Mon Sep 17 00:00:00 2001
From: Steve Kondik <steve@cyngn.com>
Date: Wed, 10 Jun 2015 13:05:24 -0700
Subject: [PATCH] releasetools: [WIP] Add support for LZMA in blockimgdiff
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

 * Requires backports.lzma to be installed for Python2.
 * To enable, set WITH_LZMA_OTA to true in the build environment.
 * This results in significantly smaller OTA packages, which results
   in less $$$ being paid to deliver said OTAs. Unfortunately it is
   also significantly slower to decompress (parallelization may help).

Conflicts:
	core/Makefile
	tools/releasetools/blockimgdiff.py
	tools/releasetools/common.py
	tools/releasetools/ota_from_target_files

Change-Id: If4b8092718aa6623cfff101030eabd24cde8763c
Signed-off-by: D. Andrei Măceș <dmaces@nd.edu>
---
 core/Makefile                               |  1 +
 tools/releasetools/blockimgdiff.py          | 19 +++++++++++++--
 tools/releasetools/common.py                | 36 +++++++++++++++++++++++++----
 tools/releasetools/ota_from_target_files.py | 22 +++++++++++++-----
 4 files changed, 65 insertions(+), 13 deletions(-)

diff --git a/core/Makefile b/core/Makefile
index 7eca2db..ebaa6ac 100644
--- a/core/Makefile
+++ b/core/Makefile
@@ -1902,6 +1902,7 @@ $(INTERNAL_OTA_PACKAGE_TARGET): $(BUILT_TARGET_FILES_PACKAGE) $(DISTTOOLS)
 	$(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH MKBOOTIMG=$(MKBOOTIMG) \
 	   $(OTA_FROM_TARGET_SCRIPT) -v \
 	   $(block_based) \
+	   $(if $(WITH_LZMA_OTA), -z) \
 	   -p $(HOST_OUT) \
 	   -k $(KEY_CERT_PAIR) \
 	   --backup=$(backuptool) \
diff --git a/tools/releasetools/blockimgdiff.py b/tools/releasetools/blockimgdiff.py
index a6c6bd8..f0894f1 100644
--- a/tools/releasetools/blockimgdiff.py
+++ b/tools/releasetools/blockimgdiff.py
@@ -26,6 +26,12 @@
 import threading
 import tempfile
 
+try:
+  from backports import lzma
+except ImportError:
+  lzma = None
+  pass
+
 from rangelib import RangeSet
 
 
@@ -237,7 +243,7 @@ def __str__(self):
 # original image.
 
 class BlockImageDiff(object):
-  def __init__(self, tgt, src=None, threads=None, version=3):
+  def __init__(self, tgt, src=None, threads=None, version=3, use_lzma=False):
     if threads is None:
       threads = multiprocessing.cpu_count() // 2
       if threads == 0:
@@ -247,6 +253,7 @@ def __init__(self, tgt, src=None, threads=None, version=3):
     self.transfers = []
     self.src_basenames = {}
     self.src_numpatterns = {}
+    self.use_lzma = use_lzma
 
     assert version in (1, 2, 3)
 
@@ -609,7 +616,15 @@ def ComputePatches(self, prefix):
     print("Reticulating splines...")
     diff_q = []
     patch_num = 0
-    with open(prefix + ".new.dat", "wb") as new_f:
+
+    if lzma and self.use_lzma:
+        open_patch = lzma.open
+        new_file = ".new.dat.xz"
+    else:
+        open_patch = open
+        new_file = ".new.dat"
+
+    with open_patch(prefix + new_file, "wb") as new_f:
       for xf in self.transfers:
         if xf.style == "zero":
           pass
diff --git a/tools/releasetools/common.py b/tools/releasetools/common.py
index 47cf759..a95e054 100644
--- a/tools/releasetools/common.py
+++ b/tools/releasetools/common.py
@@ -29,6 +29,11 @@
 import time
 import zipfile
 
+try:
+  from backports import lzma;
+except ImportError:
+  lzma = None
+
 import blockimgdiff
 import rangelib
 
@@ -1215,11 +1220,12 @@ def worker():
 
 class BlockDifference(object):
   def __init__(self, partition, tgt, src=None, check_first_block=False,
-               version=None):
+               version=None, use_lzma=False):
     self.tgt = tgt
     self.src = src
     self.partition = partition
     self.check_first_block = check_first_block
+    self.use_lzma = use_lzma
 
     # Due to http://b/20939131, check_first_block is disabled temporarily.
     assert not self.check_first_block
@@ -1233,7 +1239,7 @@ def __init__(self, partition, tgt, src=None, check_first_block=False,
     self.version = version
 
     b = blockimgdiff.BlockImageDiff(tgt, src, threads=OPTIONS.worker_threads,
-                                    version=self.version)
+                                    version=self.version, use_lzma=use_lzma)
     tmpdir = tempfile.mkdtemp()
     OPTIONS.tempfiles.append(tmpdir)
     self.path = os.path.join(tmpdir, partition)
@@ -1265,7 +1271,15 @@ def WriteVerifyScript(self, script):
       ranges = self.src.care_map.subtract(self.src.clobbered_blocks)
       ranges_str = ranges.to_string_raw()
       if self.version >= 3:
-        script.AppendExtra(('if (range_sha1("%s", "%s") == "%s" || '
+        if lzma and self.use_lzma:
+          script.AppendExtra(('if (range_sha1("%s", "%s") == "%s" || '
+                            'block_image_verify("%s", '
+                            'package_extract_file("%s.transfer.list"), '
+                            '"%s.new.dat.xz", "%s.patch.dat")) then') % (
+                            self.device, ranges_str, self.src.TotalSha1(),
+                            self.device, partition, partition, partition))
+        else:
+          script.AppendExtra(('if (range_sha1("%s", "%s") == "%s" || '
                             'block_image_verify("%s", '
                             'package_extract_file("%s.transfer.list"), '
                             '"%s.new.dat", "%s.patch.dat")) then') % (
@@ -1329,7 +1343,13 @@ def _WriteUpdate(self, script, output_zip):
     ZipWrite(output_zip,
              '{}.transfer.list'.format(self.path),
              '{}.transfer.list'.format(self.partition))
-    ZipWrite(output_zip,
+    if lzma and self.use_lzma:
+      ZipWrite(output_zip,
+             '{}.new.dat.xz'.format(self.path),
+             '{}.new.dat.xz'.format(self.partition),
+             compress_type=zipfile.ZIP_STORED)
+    else:
+      ZipWrite(output_zip,
              '{}.new.dat'.format(self.path),
              '{}.new.dat'.format(self.partition))
     ZipWrite(output_zip,
@@ -1337,7 +1357,13 @@ def _WriteUpdate(self, script, output_zip):
              '{}.patch.dat'.format(self.partition),
              compress_type=zipfile.ZIP_STORED)
 
-    call = ('block_image_update("{device}", '
+    if lzma and self.use_lzma:
+      call = ('block_image_update("{device}", '
+            'package_extract_file("{partition}.transfer.list"), '
+            '"{partition}.new.dat.xz", "{partition}.patch.dat");\n'.format(
+                device=self.device, partition=self.partition))
+    else:
+      call = ('block_image_update("{device}", '
             'package_extract_file("{partition}.transfer.list"), '
             '"{partition}.new.dat", "{partition}.patch.dat");\n'.format(
                 device=self.device, partition=self.partition))
diff --git a/tools/releasetools/ota_from_target_files.py b/tools/releasetools/ota_from_target_files.py
index 3e72ede..99f7224 100755
--- a/tools/releasetools/ota_from_target_files.py
+++ b/tools/releasetools/ota_from_target_files.py
@@ -80,6 +80,10 @@
       file-based OTA if the target_files is older and doesn't support
       block-based OTAs.
 
+  -z  Compress the block-based image using LZMA. Results in substantial
+      space reduction at the cost of longer compress/decompress time.
+      Requires the "backports.lzma" module to be installed.
+
   -b  (--binary)  <file>
       Use the given binary as the update-binary in the output package,
       instead of the binary in the build's target_files.  Use for
@@ -146,6 +150,7 @@
 OPTIONS.backuptool = False
 OPTIONS.override_device = 'auto'
 OPTIONS.override_prop = False
+OPTIONS.use_lzma = False
 
 def MostPopularKey(d, default):
   """Given a dict, return the key corresponding to the largest
@@ -658,7 +663,7 @@ def WriteFullOTAPackage(input_zip, output_zip):
     # writes incrementals to do it.
     system_tgt = GetImage("system", OPTIONS.input_tmp, OPTIONS.info_dict)
     system_tgt.ResetFileMap()
-    system_diff = common.BlockDifference("system", system_tgt, src=None)
+    system_diff = common.BlockDifference("system", system_tgt, src=None, use_lzma=OPTIONS.use_lzma)
     system_diff.WriteScript(script, output_zip)
   else:
     script.FormatPartition("/system")
@@ -691,7 +696,7 @@ def output_sink(fn, data):
     if block_based:
       vendor_tgt = GetImage("vendor", OPTIONS.input_tmp, OPTIONS.info_dict)
       vendor_tgt.ResetFileMap()
-      vendor_diff = common.BlockDifference("vendor", vendor_tgt)
+      vendor_diff = common.BlockDifference("vendor", vendor_tgt, use_lzma=OPTIONS.use_lzma)
       vendor_diff.WriteScript(script, output_zip)
     else:
       script.FormatPartition("/vendor")
@@ -861,7 +866,7 @@ def WriteBlockIncrementalOTAPackage(target_zip, source_zip, output_zip):
         OPTIONS.info_dict.get("blockimgdiff_versions", "1").split(","))
 
   system_diff = common.BlockDifference("system", system_tgt, system_src,
-                                       version=blockimgdiff_version)
+                                       version=blockimgdiff_version, use_lzma=OPTIONS.use_lzma)
 
   if HasVendorPartition(target_zip):
     if not HasVendorPartition(source_zip):
@@ -871,7 +876,7 @@ def WriteBlockIncrementalOTAPackage(target_zip, source_zip, output_zip):
     vendor_tgt = GetImage("vendor", OPTIONS.target_tmp,
                           OPTIONS.target_info_dict)
     vendor_diff = common.BlockDifference("vendor", vendor_tgt, vendor_src,
-                                         version=blockimgdiff_version)
+                                         version=blockimgdiff_version, use_lzma=OPTIONS.use_lzma)
   else:
     vendor_diff = None
 
@@ -1626,12 +1631,16 @@ def option_handler(o, a):
       OPTIONS.override_device = a
     elif o in ("--override_prop"):
       OPTIONS.override_prop = bool(a.lower() == 'true')
+    elif o in ("-z", "--use_lzma"):
+      OPTIONS.use_lzma = True
+      # Import now, and bomb out if backports.lzma isn't installed
+      from backports import lzma
     else:
       return False
     return True
 
   args = common.ParseOptions(argv, __doc__,
-                             extra_opts="b:k:i:d:wne:t:a:2o:",
+                             extra_opts="b:k:i:d:wne:t:a:2o:z",
                              extra_long_opts=[
                                  "board_config=",
                                  "package_key=",
@@ -1653,7 +1662,8 @@ def option_handler(o, a):
                                  "stash_threshold=",
                                  "backup=",
                                  "override_device=",
-                                 "override_prop="
+                                 "override_prop=",
+                                 "use_lzma"
                              ], extra_option_handler=option_handler)
 
   if len(args) != 2:
